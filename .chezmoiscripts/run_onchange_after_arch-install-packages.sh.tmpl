{{ if and (eq .chezmoi.osRelease.id "arch") (eq .chezmoi.os "linux") -}}
#!/bin/bash

user=""

{{ $de := env "XDG_SESSION_DESKTOP"  -}}

packages=(
{{- range .packages.base }}
    {{ . -}}
{{ end }}
)

{{ if hasKey .packages.machines .chezmoi.hostname -}}
    {{- $pkgs := get .packages.machines .chezmoi.hostname -}}
    {{- range $pkgs -}}
        packages+=({{ . | quote }})
    {{ end -}}
{{ end }}

{{ if hasKey .packages.desktop_environments $de -}}
    {{ $pkgs := get .packages.desktop_environments $de }}
    {{- range $pkgs -}}
        packages+=({{ . | quote }})
    {{ end -}}
{{- end }}


aur_packages=(
{{- range .aur_packages.base }}
    {{ . -}}
{{ end }}
)

{{ if hasKey .aur_packages.desktop_environments $de -}}
    {{- $pkgs := get .aur_packages.desktop_environments $de -}}
    {{- range $pkgs -}}
        aur_packages+=({{ . | quote }})
    {{ end -}}
{{ end }}


function run_as_root() {
    if [[ $EUID -ne 0 ]]; then
       echo "This script needs root privliges!"
       if command -v -- "/usr/bin/doas" > /dev/null 2>&1; then
            doas "$PWD/$0 $USER"
       elif command -v -- "/usr/bin/sudo" > /dev/null 2>&1; then
            sudo "$PWD/$0 $USER"
       else
            echo "Neither doas or sudo was found on the system!"
       fi                  
    fi
}

function run_as_user() {
    if [[ $EUID -eq 0 ]]; then
       echo "This script has to run as the user, dropping root privleges!"
       if command -v -- "/usr/bin/doas" > /dev/null 2>&1; then
            doas -u "$user" "$PWD/$0 skip-pacman"
       elif command -v -- "/usr/bin/sudo" > /dev/null 2>&1; then
            sudo -u "$user" "$PWD/$0 skip-pacman"
       else
            echo "Neither doas or sudo was found on the system!"
       fi                  
    fi
}

function exit_on_cmd_fail() {
    if [ $? -ne 0 ]; then
        echo "$1"
        exit 1
    fi
}

function install_pacman_pkgs() {
    if [ ${#packages[@]} -ne 0 ]; then
        run_as_root
        echo "Installing pacman pkgs!"
        sudo pacman -S --needed "${packages[@]}"
    fi
}

function install_aur_pkgs() {  
    if [ ${#aur_packages[@]} -ne 0 ]; then
        if ! command -v -- "/usr/bin/paru" > /dev/null 2>&1; then
            echo "Paru not installed, installing!"

            sudo pacman -S --needed base-devel
            exit_on_cmd_fail "Failed to install base-devel, exiting!"
            git clone https://aur.archlinux.org/paru.git
            exit_on_cmd_fail "Failed to download paru sources, exiting!"
        
            pwd="$PWD"
            cd paru
            makepkg -si
            exit_on_cmd_fail "Failed to install paru"

            echo "Paru installed succsessfully."
            cd $pwd
            rm -r paru
        fi

        run_as_user
        echo "Installing aur pkgs (${#aur_packages[@]})!"
        for pkg in $aur_packages; do
            paru -S --needed $pkg
        done
    fi
}


if [[ -z "$1" ]]; then
   install_pacman_pkgs
elif [[ "$1" == "skip-pacman" ]]; then
   install_aur_pkgs
else
   user="$1"
   install_pacman_pkgs
   install_aur_pkgs
fi

{{ end }}
{{/* Test template: 'cat run_onchange_arch-install-packages.sh.tmpl | chezmoi execute-template' */}}
